// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  dateOfBirth   DateTime? // Date of birth for numerology calculation
  lifePathNumber Int?     // Calculated life path number (1-9, 11, 22, 33)
  numerologyProfile String? // JSON object containing numerology data
  themePreference String? // User's theme preference based on numerology
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
  reviews  Review[]
  wishlist WishlistItem[]
  seller   Seller?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Seller {
  id          String    @id @default(cuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName String
  description String?
  logo        String?
  address     String    // JSON object
  phone       String?
  website     String?
  gstNumber   String?
  panNumber   String?
  bankDetails String?   // JSON object
  isVerified  Boolean   @default(false)
  isActive    Boolean   @default(true)
  commission  Float     @default(10.0) // Commission percentage
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products   SellerProduct[]
  shipments  Shipment[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  salePrice   Float?
  images      String    // JSON array of image URLs
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  stock       Int       @default(0)
  sku         String    @unique
  weight      Float?
  dimensions  String?   // JSON object
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  tags        String?   // JSON array of tags
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  variants    ProductVariant[]
  orderItems  OrderItem[]
  reviews     Review[]
  wishlist    WishlistItem[]
  sellerProduct SellerProduct?
}

model SellerProduct {
  id        String   @id @default(cuid())
  sellerId  String
  seller    Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  customSku String?  @unique // Custom SKU for seller's internal reference
  price     Float
  stock     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      String?
  color     String?
  stock     Int     @default(0)
  price     Float?
  sku       String  @unique
  isActive  Boolean @default(true)
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  status        String      @default("PENDING")
  total         Float
  subtotal      Float
  tax           Float       @default(0)
  shipping      Float       @default(0)
  discount      Float       @default(0)
  shippingAddress String    // JSON object
  billingAddress  String    // JSON object
  paymentIntentId String?
  paymentStatus  String      @default("PENDING")
  trackingNumber String?
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  items OrderItem[]
  shipments Shipment[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  variantId String?
}

model Shipment {
  id            String   @id @default(cuid())
  orderId       String
  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sellerId      String
  seller        Seller   @relation(fields: [sellerId], references: [id])
  trackingNumber String?
  carrier       String?
  status        String   @default("PENDING") // PENDING, SHIPPED, DELIVERED, RETURNED
  shippedAt     DateTime?
  deliveredAt   DateTime?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  rating    Int
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// Enums are not supported in SQLite, using String fields instead
// Role: USER, SELLER, ADMIN
// OrderStatus: PENDING, CONFIRMED, PROCESSING, SHIPPED, DELIVERED, CANCELLED, REFUNDED
// PaymentStatus: PENDING, PAID, FAILED, REFUNDED
// ShipmentStatus: PENDING, SHIPPED, DELIVERED, RETURNED
